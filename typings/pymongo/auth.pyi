"""
This type stub file was generated by pyright.
"""

import functools
from collections import namedtuple
from bson.py3compat import PY3

"""Authentication helpers."""
HAVE_KERBEROS = True
_USE_PRINCIPAL = False
MECHANISMS = frozenset(['GSSAPI', 'MONGODB-CR', 'MONGODB-X509', 'PLAIN', 'SCRAM-SHA-1', 'SCRAM-SHA-256', 'DEFAULT'])
class _Cache(object):
    __slots__ = ...
    _hash_val = ...
    def __init__(self):
        self.data = ...
    
    def __eq__(self, other):
        ...
    
    def __ne__(self, other):
        ...
    
    def __hash__(self):
        ...
    


MongoCredential = namedtuple('MongoCredential', ['mechanism', 'source', 'username', 'password', 'mechanism_properties', 'cache'])
GSSAPIProperties = namedtuple('GSSAPIProperties', ['service_name', 'canonicalize_host_name', 'service_realm'])
def _build_credentials_tuple(mech, source, user, passwd, extra, database):
    """Build and return a mechanism specific credentials tuple.
    """
    ...

if PY3:
    def _xor(fir, sec):
        """XOR two byte strings together (python 3.x)."""
        ...
    
    _from_bytes = int.from_bytes
    _to_bytes = int.to_bytes
else:
    def _xor(fir, sec):
        """XOR two byte strings together (python 2.x)."""
        ...
    
    def _from_bytes(value, dummy, _int=..., _hexlify=...):
        """An implementation of int.from_bytes for python 2.x."""
        ...
    
    def _to_bytes(value, length, dummy, _unhexlify=...):
        """An implementation of int.to_bytes for python 2.x."""
        ...
    
def _parse_scram_response(response):
    """Split a scram response into key, value pairs."""
    ...

def _authenticate_scram(credentials, sock_info, mechanism):
    """Authenticate using SCRAM."""
    ...

def _password_digest(username, password):
    """Get a password digest to use for authentication.
    """
    ...

def _auth_key(nonce, username, password):
    """Get an auth key to use for authentication.
    """
    ...

def _authenticate_gssapi(credentials, sock_info):
    """Authenticate using GSSAPI.
    """
    ...

def _authenticate_plain(credentials, sock_info):
    """Authenticate using SASL PLAIN (RFC 4616)
    """
    ...

def _authenticate_cram_md5(credentials, sock_info):
    """Authenticate using CRAM-MD5 (RFC 2195)
    """
    ...

def _authenticate_x509(credentials, sock_info):
    """Authenticate using MONGODB-X509.
    """
    ...

def _authenticate_mongo_cr(credentials, sock_info):
    """Authenticate using MONGODB-CR.
    """
    ...

def _authenticate_default(credentials, sock_info):
    ...

_AUTH_MAP = { 'CRAM-MD5': _authenticate_cram_md5,'GSSAPI': _authenticate_gssapi,'MONGODB-CR': _authenticate_mongo_cr,'MONGODB-X509': _authenticate_x509,'PLAIN': _authenticate_plain,'SCRAM-SHA-1': functools.partial(_authenticate_scram, mechanism='SCRAM-SHA-1'),'SCRAM-SHA-256': functools.partial(_authenticate_scram, mechanism='SCRAM-SHA-256'),'DEFAULT': _authenticate_default }
def authenticate(credentials, sock_info):
    """Authenticate sock_info."""
    ...

def logout(source, sock_info):
    """Log out from a database."""
    ...

