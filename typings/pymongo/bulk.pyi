"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""The bulk write operations interface.

.. versionadded:: 2.7
"""
_DELETE_ALL = 0
_DELETE_ONE = 1
_BAD_VALUE = 2
_UNKNOWN_ERROR = 8
_WRITE_CONCERN_ERROR = 64
_COMMANDS = ('insert', 'update', 'delete')
_UOP = u"op"
class _Run(object):
    """Represents a batch of write operations.
    """
    def __init__(self, op_type):
        """Initialize a new Run object.
        """
        self.op_type = ...
        self.index_map = ...
        self.ops = ...
        self.idx_offset = ...
    
    def index(self, idx):
        """Get the original index of an operation in this run.

        :Parameters:
          - `idx`: The Run index that maps to the original index.
        """
        ...
    
    def add(self, original_index, operation):
        """Add an operation to this Run instance.

        :Parameters:
          - `original_index`: The original index of this operation
            within a larger bulk operation.
          - `operation`: The operation document.
        """
        ...
    


def _merge_command(run, full_result, offset, result):
    """Merge a write command result into the full bulk result.
    """
    ...

def _raise_bulk_write_error(full_result):
    """Raise a BulkWriteError from the full bulk api result.
    """
    ...

class _Bulk(object):
    """The private guts of the bulk write API.
    """
    def __init__(self, collection, ordered, bypass_document_validation):
        """Initialize a _Bulk instance.
        """
        self.collection = ...
        self.ordered = ...
        self.ops = ...
        self.executed = ...
        self.bypass_doc_val = ...
        self.uses_collation = ...
        self.uses_array_filters = ...
        self.is_retryable = ...
        self.retrying = ...
        self.started_retryable_write = ...
        self.current_run = ...
    
    @property
    def bulk_ctx_class(self):
        ...
    
    def add_insert(self, document):
        """Add an insert document to the list of ops.
        """
        ...
    
    def add_update(self, selector, update, multi: bool = ..., upsert: bool = ..., collation: Optional[Any] = ..., array_filters: Optional[Any] = ...):
        """Create an update document and add it to the list of ops.
        """
        ...
    
    def add_replace(self, selector, replacement, upsert: bool = ..., collation: Optional[Any] = ...):
        """Create a replace document and add it to the list of ops.
        """
        ...
    
    def add_delete(self, selector, limit, collation: Optional[Any] = ...):
        """Create a delete document and add it to the list of ops.
        """
        ...
    
    def gen_ordered(self):
        """Generate batches of operations, batched by type of
        operation, in the order **provided**.
        """
        ...
    
    def gen_unordered(self):
        """Generate batches of operations, batched by type of
        operation, in arbitrary order.
        """
        ...
    
    def _execute_command(self, generator, write_concern, session, sock_info, op_id, retryable, full_result):
        ...
    
    def execute_command(self, generator, write_concern, session):
        """Execute using write commands.
        """
        ...
    
    def execute_insert_no_results(self, sock_info, run, op_id, acknowledged):
        """Execute insert, returning no results.
        """
        ...
    
    def execute_op_msg_no_results(self, sock_info, generator):
        """Execute write commands with OP_MSG and w=0 writeConcern, unordered.
        """
        ...
    
    def execute_command_no_results(self, sock_info, generator):
        """Execute write commands with OP_MSG and w=0 WriteConcern, ordered.
        """
        ...
    
    def execute_no_results(self, sock_info, generator):
        """Execute all operations, returning no results (w=0).
        """
        ...
    
    def execute(self, write_concern, session):
        """Execute operations.
        """
        self.executed = ...
    


class BulkUpsertOperation(object):
    """An interface for adding upsert operations.
    """
    __slots__ = ...
    def __init__(self, selector, bulk, collation):
        ...
    
    def update_one(self, update):
        """Update one document matching the selector.

        :Parameters:
          - `update` (dict): the update operations to apply
        """
        ...
    
    def update(self, update):
        """Update all documents matching the selector.

        :Parameters:
          - `update` (dict): the update operations to apply
        """
        ...
    
    def replace_one(self, replacement):
        """Replace one entire document matching the selector criteria.

        :Parameters:
          - `replacement` (dict): the replacement document
        """
        ...
    


class BulkWriteOperation(object):
    """An interface for adding update or remove operations.
    """
    __slots__ = ...
    def __init__(self, selector, bulk, collation):
        ...
    
    def update_one(self, update):
        """Update one document matching the selector criteria.

        :Parameters:
          - `update` (dict): the update operations to apply
        """
        ...
    
    def update(self, update):
        """Update all documents matching the selector criteria.

        :Parameters:
          - `update` (dict): the update operations to apply
        """
        ...
    
    def replace_one(self, replacement):
        """Replace one entire document matching the selector criteria.

        :Parameters:
          - `replacement` (dict): the replacement document
        """
        ...
    
    def remove_one(self):
        """Remove a single document matching the selector criteria.
        """
        ...
    
    def remove(self):
        """Remove all documents matching the selector criteria.
        """
        ...
    
    def upsert(self):
        """Specify that all chained update operations should be
        upserts.

        :Returns:
          - A :class:`BulkUpsertOperation` instance, used to add
            update operations to this bulk operation.
        """
        ...
    


class BulkOperationBuilder(object):
    """**DEPRECATED**: An interface for executing a batch of write operations.
    """
    __slots__ = ...
    def __init__(self, collection, ordered: bool = ..., bypass_document_validation: bool = ...):
        """**DEPRECATED**: Initialize a new BulkOperationBuilder instance.

        :Parameters:
          - `collection`: A :class:`~pymongo.collection.Collection` instance.
          - `ordered` (optional): If ``True`` all operations will be executed
            serially, in the order provided, and the entire execution will
            abort on the first error. If ``False`` operations will be executed
            in arbitrary order (possibly in parallel on the server), reporting
            any errors that occurred after attempting all operations. Defaults
            to ``True``.
          - `bypass_document_validation`: (optional) If ``True``, allows the
            write to opt-out of document level validation. Default is
            ``False``.

        .. note:: `bypass_document_validation` requires server version
          **>= 3.2**

        .. versionchanged:: 3.5
           Deprecated. Use :meth:`~pymongo.collection.Collection.bulk_write`
           instead.

        .. versionchanged:: 3.2
          Added bypass_document_validation support
        """
        ...
    
    def find(self, selector, collation: Optional[Any] = ...):
        """Specify selection criteria for bulk operations.

        :Parameters:
          - `selector` (dict): the selection criteria for update
            and remove operations.
          - `collation` (optional): An instance of
            :class:`~pymongo.collation.Collation`. This option is only
            supported on MongoDB 3.4 and above.

        :Returns:
          - A :class:`BulkWriteOperation` instance, used to add
            update and remove operations to this bulk operation.

        .. versionchanged:: 3.4
           Added the `collation` option.

        """
        ...
    
    def insert(self, document):
        """Insert a single document.

        :Parameters:
          - `document` (dict): the document to insert

        .. seealso:: :ref:`writes-and-ids`
        """
        ...
    
    def execute(self, write_concern: Optional[Any] = ...):
        """Execute all provided operations.

        :Parameters:
          - write_concern (optional): the write concern for this bulk
            execution.
        """
        ...
    


