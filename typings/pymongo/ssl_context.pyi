"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

"""A fake SSLContext implementation."""
class SSLContext(object):
    """A fake SSLContext.

    This implements an API similar to ssl.SSLContext from python 3.2
    but does not implement methods or properties that would be
    incompatible with ssl.wrap_socket from python 2.7 < 2.7.9.

    You must pass protocol which must be one of the PROTOCOL_* constants
    defined in the ssl module. ssl.PROTOCOL_SSLv23 is recommended for maximum
    interoperability.
    """
    __slots__ = ...
    def __init__(self, protocol):
        ...
    
    @property
    def protocol(self):
        """The protocol version chosen when constructing the context.
        This attribute is read-only.
        """
        ...
    
    def __get_verify_mode(self):
        """Whether to try to verify other peers' certificates and how to
        behave if verification fails. This attribute must be one of
        ssl.CERT_NONE, ssl.CERT_OPTIONAL or ssl.CERT_REQUIRED.
        """
        ...
    
    def __set_verify_mode(self, value):
        """Setter for verify_mode."""
        ...
    
    verify_mode = ...
    def load_cert_chain(self, certfile, keyfile: Optional[Any] = ...):
        """Load a private key and the corresponding certificate. The certfile
        string must be the path to a single file in PEM format containing the
        certificate as well as any number of CA certificates needed to
        establish the certificate's authenticity. The keyfile string, if
        present, must point to a file containing the private key. Otherwise
        the private key will be taken from certfile as well.
        """
        ...
    
    def load_verify_locations(self, cafile: Optional[Any] = ..., dummy: Optional[Any] = ...):
        """Load a set of "certification authority"(CA) certificates used to
        validate other peers' certificates when `~verify_mode` is other than
        ssl.CERT_NONE.
        """
        ...
    
    def wrap_socket(self, sock, server_side: bool = ..., do_handshake_on_connect: bool = ..., suppress_ragged_eofs: bool = ..., dummy: Optional[Any] = ...):
        """Wrap an existing Python socket sock and return an ssl.SSLSocket
        object.
        """
        ...
    


